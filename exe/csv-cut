#!/usr/bin/env ruby

require 'csv'
require 'optparse'
require_relative '../lib/csvutil'

##
# Extract the contents of a column or columns from the input csv
#

CMD = File.basename __FILE__

###
# Parse options
###

options = {}
options[:out_col_sep] = ','

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} -c col1,col2,col3 CSV_FILE "

  # version
  version_help = "Print #{CMD} and quit"
  opts.on '-v', '--version', version_help do
    print_version
    exit
  end

  opts.on '-s', '--output-sep SEPARATOR', 'Output column separator' do |sep|
    options[:out_col_sep] = sep
  end

  opts.on '-x', '--input-sep SEPARATOR', 'Input column separator' do |sep|
    options[:in_col_sep] = sep
  end

  opts.on '-l' , '--list-headers', 'List the headers in CSV and quit' do
    options[:list_headers] = true
  end

  opts.on '-c', '--columns COL1[,COL2[,COL3,..]]', 'Comma separated list of columns to extract' do |columns|
    options[:columns] = columns.split ','
  end

  opts.on '-d', '--headers', 'Output the cut column headers' do
    options[:output_headers] = true
  end

  opts.on '-h', '--help', 'Prints this help' do
    puts opts
    exit
  end
end.parse!

###
# Select input -- a file argument or a pipe
##
# See if there are any arguments left; otherwise, read from stdin
if $stdin.tty? || ARGV.any?
  csv_file = ARGV.shift
  abort 'Please provide a CSV file' unless csv_file
  abort "Can't find CSV file" unless File.exist? csv_file
  input = File.open csv_file
else
  input = $stdin
end

csv_cut = CSVUtil::Cut.new options[:columns], options: options
csv_cut.process input