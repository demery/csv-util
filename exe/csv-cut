#!/usr/bin/env ruby

require 'csv'
require 'optparse'
require_relative '../lib/csvutil'

##
# Extract the contents of a column or columns from the input csv
#

CMD = File.basename __FILE__

###
# Methods
###

def list_headers row
  puts "Headers in input:"
  puts "---"
  puts row.to_h.keys
end

def proces_first_row row:, options:, csv:
  if options[:list_headers]
    list_headers row
    exit
  end
  abort "Please provide a column name" unless options[:columns]
  csv << options[:columns] if options[:headers]
end

###
# Parse options
###

options = {}
options[:separator] = ','

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} -c col1,col2,col3 CSV_FILE "

  # version
  version_help = "Print #{CMD} and quit"
  opts.on '-v', '--version', version_help do
    print_version
    exit
  end

  opts.on '-s', '--separator SEP', 'Separator for mulitple columns' do |sep|
    options[:separator] = sep
  end

  opts.on '-l' , '--list-headers', 'List the headers in CSV and quit' do
    options[:list_headers] = true
  end

  opts.on '-c', '--columns COL1[,COL2[,COL3,..]]', 'Comma separated list of columns to extract' do |columns|
    options[:columns] = columns.split ','
  end

  opts.on '-d', '--headers', 'Print column headers' do
    options[:headers] = true
  end

  opts.on '-h', '--help', 'Prints this help' do
    puts opts
    exit
  end
end.parse!

###
# Select input -- a file argument or a pipe
##
# See if there are any arguments left; otherwise, read from stdin
if $stdin.tty? || ARGV.any?
  csv_file = ARGV.shift
  abort "Please provide a CSV file" unless csv_file
  abort "Can't find CSV file" unless File.exist? csv_file
  input = File.open csv_file
else
  input = $stdin
end


###
# Process the data
###
first_row = true
CSV col_sep: options[:separator] do |csv|
  CSV.parse input, headers: true do |row|
    if first_row
      proces_first_row row: row, options: options, csv: csv
      first_row = false
    end

    csv << options[:columns].map { |column| row[column] }
  end
end


