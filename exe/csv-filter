#!/usr/bin/env ruby

require 'optparse'
require 'csv'
require 'tempfile'
require_relative '../lib/csvutil'

DEFAULT_ENCODING = 'utf-8'
CMD = File.basename __FILE__

########################################################################
# Methods
########################################################################

##
# Print the version of the command to stdout
def print_version
  puts "#{CMD} #{CSVUtil::VERSION}"
  exit
end

##
# Either regex or text must be provided, but not both.
#
def valid_match? options
  options[:pattern].nil? ^ options[:text].nil?
end

########################################################################
# Options
########################################################################

options = {}
OptionParser.new do |opts|
  opts.banner = <<EOF
Usage: csv-filter --column=COLUMN_NAME {--regex|--text}=VALUE [OPTIONS] CSV_FILE

Output a new CSV matching the filter criteria.

The --reject flag reverses the operation.
EOF

  # version
  version_help = "Print #{CMD} and quit"
  opts.on '-v', '--version', version_help do
    options[:version] = true
  end

  opts.on '-c', '--column COLUMN_NAME', 'Column to filter on' do |col|
    options[:column] = col
  end

  opts.on('-r', '--regex PATTERN',
          'Ruby regular expression pattern; e.g., \'trad.*cards\'') do |regex|
    options[:pattern] = regex
  end

  opts.on('-j', '--reject', 'Reject all matching rows') do
    options[:reject_matching] = true
  end

  opts.on '-i', '--case-insensitive', 'Whether regex is case-insensitive' do
    options[:insensitive] = true
  end

  opts.on '-t', '--text TEXT', 'An exact string to match' do |text|
    options[:text] = text
  end

  opts.on '-u', '--substring', 'Output rows containing text' do
    options[:substring] = true
  end

  opts.on '-e', '--encoding ENCODING', 'Input file encoding (if not ASCII or UTF-8)' do |encoding|
    options[:encoding] = encoding
  end

  c_help = %Q{List encodings and quit (#{Encoding.list.size} encodings)}
  opts.on '--list-encodings', c_help do
    puts Encoding.list
    exit
  end

  opts.on('-h', '--help', 'Print this help') do
    puts opts
    exit
  end
end.parse!

print_version if options[:version]


###
# Select input -- a file argument or a pipe
##
# See if there are any arguments left; otherwise, read from stdin
if $stdin.tty? || ARGV.any?
  csv_file = ARGV.shift
  abort 'Please provide a CSV file' unless csv_file
  abort "Can't find CSV file" unless File.exist? csv_file
  input = File.open csv_file
else
  input = $stdin
end

# Handle options
abort 'Provide either a regex or text to match' unless valid_match? options
abort 'Specify a column to match' unless options[:column]

filter = CSVUtil::Filter.new options[:column], **options
filter.filter input