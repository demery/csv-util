#!/usr/bin/env ruby

require 'optparse'
require 'csv'
require 'tempfile'
require_relative '../lib/csvutil'

DEFAULT_ENCODING = 'utf-8'
CMD = File.basename __FILE__

########################################################################
# Methods
########################################################################

def print_version
  puts "#{CMD} #{CSVUtil::VERSION}"
  exit
end

##
# Either regex or text must be provided, but not both.
#
def valid_match? options
  options[:regex_string].nil? ^ options[:text].nil?
end


def match? row, options
  value = row[options[:column]]
  return value == options[:text] unless options[:text].nil?

  value =~ options[:regex]
end

def proces_first_row row:, options:, csv:
  csv << row.to_h.keys
end

########################################################################
# Options
########################################################################

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: csv-filter --column=COLUMN_NAME {--regex|--value}=VALUE CSV_FILE"

  # version
  version_help = "Print #{CMD} and quit"
  opts.on '-v', '--version', version_help do
    options[:version] = true
  end

  opts.on "-c", "--column COLUMN_NAME", "Column to filter on" do |col|
    options[:column] = col
  end

  opts.on("-r", "--regex PATTERN",
          "Ruby regular expression; e.g., 'trade.*cards'") do |regex_string|
    options[:regex_string] = regex_string
  end

  opts.on "-i", "--case-insensitive", "Whether match is case-insensitive" do
    options[:insensitive] = true
  end

  opts.on "-t", "--text TEXT", "An exact string to match" do |text|
    options[:text] = text
  end

  opts.on "-e", "--encoding ENCODING", "Input file encoding (if not ASCII or UTF-8)" do |encoding|
    options[:encoding] = encoding
  end

  c_help = %Q{List encodings and quit (#{Encoding.list.size} encodings)}
  opts.on "-c", "--list-encodings", c_help do
    puts Encoding.list
    exit
  end

  opts.on("-h", "--help", "Print this help") do
    puts opts
    exit
  end
end.parse!

print_version if options[:version]


###
# Select input -- a file argument or a pipe
##
# See if there are any arguments left; otherwise, read from stdin
if $stdin.tty?
  csv_file = ARGV.shift
  abort "Please provide a CSV file" unless csv_file
  abort "Can't find CSV file" unless File.exist? csv_file
  input = File.open csv_file
else
  input = $stdin
end

# Handle options
encoding = options[:encoding] || DEFAULT_ENCODING
abort 'Provide either a regex or text to match' unless valid_match? options
abort 'Specify a column to match' unless options[:column]

if options[:regex_string]
  options[:regex] = Regexp.new options[:regex_string], options[:insensitive]
end


first_row = true
CSV headers: true do |csv|
  CSV.parse input, headers: true, encoding: "#{encoding}:utf-8" do |row|
    if first_row
      proces_first_row row: row, options: options, csv: csv
      first_row = false
    end
    csv << row if match? row, options
  end
end

