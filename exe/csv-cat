#!/usr/bin/env ruby

require 'csv'
require 'optionparser'
require_relative '../lib/csvutil'


CMD = File.basename __FILE__

########################################################################
# Methods
########################################################################
def print_version
  puts "#{CMD} #{CSVUtil::VERSION}"
  exit
end

options = {}
parser = OptionParser.new do |opts|

  opts.banner = <<EOF
Usage: #{File.basename __FILE__} [options] CSV CSV [...]

Concatenate two or more CSVs. CSVs must have headers, but the headers don't
have to match. Headers of output CSV will a union of unique input CSV headers.
Header uniqueness is case sensitve.

NB: Not tested for empty headers:

    name,address,,city,state

Or for non-unique headers in the same CSV; e.g.,

    name,address,city,state,name

EOF

  # version
  version_help = "Print #{CMD} and quit"
  opts.on '-v', '--version', version_help do
    options[:version] = true
  end

  # sort
  sort_help = "Sort combined records by first item"
  opts.on '-s', '--sort', sort_help do |sort|
    options[:sort] = sort
  end

  # uniq
  uniq_help = 'Return only uniq values'
  opts.on '-u', '--uniq', uniq_help do |uniq|
    options[:uniq] = uniq
  end

  # outfile
  out_help = "Specify an output filename (default: stdout)"
  opts.on '-o', '--outfile OUTFILE', out_help do |outfile|
    options[:outfile] = outfile
  end

  help_help = <<~EOF
    Prints this help

  EOF
  opts.on("-h", "--help", help_help) do
    puts opts
    exit
  end
end

parser.parse!

print_version if options[:version]

input = $stdin.tty? ? ARGV.dup : ARGF
csvs = input.map &:chomp

# get the unique headers
header = csvs.flat_map { |csv| CSV.readlines(csv).first }.uniq

def get_csv_output opts
  return StringIO.new if opts[:sort]
  return StringIO.new if opts[:uniq]
  return File.open opts[:outfile], 'w' if opts[:outfile]

  STDOUT.dup
end

output = get_csv_output options


CSV output, headers: true do |csv|
  csv << header
  csvs.each do |source|
    CSV.foreach source, headers: true do |row|
      csv << row.to_h # hash for header matching
    end
  end
end


case output
when File
  output.close
  $stderr.puts "Wrote: #{output.path}"
  exit
when StringIO
  # do nothing
else
  # we must have written to stdout; quit
  exit
end

output.rewind
lines = output.readlines
head = lines.shift

lines.sort! if options[:sort]
lines.uniq! if options[:uniq]

lines.unshift head

if options[:outfile]
  File.new(options[:outfile], 'w"') { |f| f.puts lines }
else
  $stdout.puts lines
end
