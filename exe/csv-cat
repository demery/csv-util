#!/usr/bin/env ruby

require 'csv'
require 'optionparser'

options = { }

parser = OptionParser.new do |opts|

  opts.banner = <<EOF
Usage: #{File.basename __FILE__} [options] CSV CSV [...]

Concatenate two or more CSVs. CSVs must have headers, but the headers don't
have to match. Headers of output CSV will a union of unique input CSV headers.
Header uniqueness is case sensitve.

NB: Not tested for empty headers:

    name,address,,city,state

Or for non-unique headers in the same CSV; e.g.,

    name,address,city,state,name

NA

EOF

  # directory
  out_help = "The output file [default STDOUT]"
  opts.on('-o file', '--outfile=FILE', out_help) do |path|
    options[:out_file] = path
  end

  # sort
  sort_help = "Sort combined records by first item"
  opts.on '-s', '--sort', sort_help do |sort|
    options[:sort] = sort
  end

  uniq_help = 'Return only uniq values'
  opts.on '-u', '--uniq', uniq_help do |uniq|
    options[:uniq] = uniq
  end

  # verbose
  verb_help = "Print full error messages"
  opts.on('-v', '--verbose', TrueClass, verb_help) do |verbose|
    options[:verbose] = verbose
  end

  help_help = <<~EOF
    Prints this help

  EOF
  opts.on("-h", "--help", help_help) do
    puts opts
    exit
  end
end

parser.parse!

csvs = ARGV.dup

# get the unique headers
header = csvs.flat_map { |csv| CSV.readlines(csv).first }.uniq

csv_io = StringIO.new

CSV csv_io, headers: true do |csv|
  csv << header
  csvs.each do |source|
    CSV.foreach source, headers: true do |row|
      csv << row.to_h # hash for header matching
    end
  end
end

csv_io.rewind

lines = csv_io.readlines
head = lines.shift

lines.sort! if options[:sort]
lines.uniq! if options[:uniq]

lines.unshift head

if options[:out_file]
  File.open(options[:out_file], 'w+') { |f| f.puts lines }
  STDERR.puts "Wrote #{options[:out_file]}"
else
  STDOUT.puts lines
end
