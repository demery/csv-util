#!/usr/bin/env ruby

require 'csv'
require 'optionparser'
require 'fileutils'
require 'tempfile'
require_relative '../lib/csvutil'


CMD = File.basename __FILE__

########################################################################
# Methods
########################################################################
def print_version
  puts "#{CMD} #{CSVUtil::VERSION}"
  exit
end

=begin
For an array integers of for each row skipped by the slice operation,
output the complement string for a sliced CSV.

A sliced CSV has in its name the slice spec for the range of rows sliced from a
source CSV; e.g., for a slice spc of +3..5+, the span string is +3-5+.
The complement string is the span string for all the rows that
<b>aren't</b> in the sliced CSV; for example, for a source CSV of 10
rows with a slice spec of +3..5+, the 'complents' CSV would have
rows 1-2 and 6-10 of the source CSV and the span string would be

  1-2+6-10

@example
  build_skips_string([1,2,6,7,8,9,10])  # => 1-2+6-10

So, in use:

@example Given a file +source.csv+ with ten rows:
  $ csv-slice --split --spec 3..5 --outfile output.csv source.csv
  Wrote: output-slice-3-5.csv, output-complement-1-2+6-10

@param [Array<Integer>] skipped_rows an array integers of all skipped
  row numbers; e.g., [1, 2, 6, 7, 8, 9, 10]: rows 1 to 2 and 6 to 10
  were skipped
@return [String] the complement string for the provided pairs; e.g.,
  +1-2\+6-10+; rows 1 to 2 and 6 to 10 were skipped
=end
def build_skips_string skipped_rows
  # scan the input array and create range pairs for sequential skips;
  # for example, in the following:
  #
  #   [1, 2, 5, 7, 8, 9, 10]
  #
  # 1-2, 5, and 7-10 are sequences of skipped rows; convert the source
  # array to an array of pairs of integers representing the continuous
  # blocks of skipped rows:
  #
  #  [1, 2, 5, 5, 7, 10] # 1-2, 5-5, and 7-10
  #
  # This can be turn into an array of arrays of pairs that can then
  # be mapped into a 'skips string':
  #
  #   [1, 2, 5, 5, 7, 10].each_slice(2).map { |pair|
  #     pair.uniq.join '-'
  #   }.join '+' # => 1-2+5+7-10
  #
  #   ....
  skipped_rows.reduce([]) { |ra, i|
    # turn
    if ra.empty?
      ra << i << i # e.g., [1, 1]
    elsif ra.last.succ == i
      ra[-1] = i   # e.g., [1, 1][-1] = 2 # => [1, 2]
    else
      ra << i << i # e.g., [1, 2] << 5 << 5 # = [1, 2, 5, 5 ]
    end
    ra
  }.each_slice(2).map { |pair|
    # now we have [1,2,5,5,7,10];
    # split that array into two-integer pairs: [[1,2], [5,5], [7,10]];
    # then join the uniq values each pair with '-'; thus:
    # ['1-2', '5', '7-10']
    pair.uniq.join '-'
  }.join '+' # => '1-2+5+7-10'
end

def write_outfile output_csv, output_path
  FileUtils.mv output_csv.path, output_path

  output_path
end

def build_file_name output_file, type:, span_string:
  ext       = File.extname output_file
  base_path = output_file.chomp ext

  "#{base_path}-#{type}-#{span_string}#{ext}"
end

options = {}
parser = OptionParser.new do |opts|

  opts.banner = <<EOF
Usage: #{File.basename __FILE__} [options] CSV CSV [...]

Return a new version of the CSV with only the specified row

NB: Assumes CSV has headers.

EOF

  # version
  version_help = "Print #{CMD} and quit"
  opts.on '-v', '--version', version_help do
    print_version
    exit
  end

  # outfile
  out_help = "Specify an output filename (default: stdout)"
  opts.on '-o', '--outfile OUTFILE', out_help do |outfile|
    options[:outfile] = outfile
  end

  # findrow
  matching_row_help ="Get the number of the first row matching column=pattern"
  opts.on '-r', '--matching-row "HEADER=PATTERN"', matching_row_help do |query|
    options[:row_query] = query
  end

  # slice
  slice_help = "Row number(s) to slice on; e.g., '50', '50,10', '50..60'"
  opts.on '-s', '--slice SLICE_SPEC', slice_help do |slice_spec|
    options[:slice_spec] = slice_spec
  end

  # split
  split_help = "Output two CSVs: one of sliced rows and one of the remainder"
  opts.on '-p', '--split', split_help do
    options[:split] = true
    options[:outfile] ||= 'output.csv'
  end

  help_help = <<~EOF
    Prints this help

  EOF
  opts.on("-h", "--help", help_help) do
    puts opts
    exit
  end
end

parser.parse!
# STDERR.puts "===== Is $stdin.tty? #{$stdin.tty?}"

if ARGV.any? || $stdin.tty?
  csv_file = ARGV.shift
  abort "Please provide a CSV file" unless csv_file
  abort "Can't find CSV file" unless File.exist? csv_file
  input = open csv_file
else
  input = $stdin
end


def get_csv_output opts
  return File.open opts[:outfile], 'w' if opts[:outfile]

  STDOUT.dup
end



if (query = options[:row_query])
  raise "Invalid row number query #{query}" unless query =~ %r{\A[^=]+="?.+\z}
  header, pattern = query.split '=', 2
  row_num = 0
  found = false
  CSV.parse input, headers: true do |row|
    raise "Unknown header: #{header}" unless row[header]
    row_num += 1
    if row[header] =~ %r{#{pattern}}
      found = true
      break
    end
  end

  if found
    puts row_num
    exit 0
  else
    $stderr.puts "WARNING: No row found matching #{options[:row_query]}"
    exit 1
  end
end

stop = nil
spec = options[:slice_spec]
case spec
when %r{\A\d+\z}
  start = Integer(spec)
when %r{\A\d+,\d+\z}
  start, count = spec.split(',').map { |i| Integer i }
  stop = count + start
when %r{\A\d+\.{2}\d+\z}
  start, stop = spec.split('..').map { |i| Integer i }
else
  raise "Invalid slice specification: '#{spec}'"
end




if options[:split]
  # 🤷🏻 suddenly it stopped working to do CSV.open Tempfile.new, 'w', ...
  slice_tmp = Tempfile.new
  comp_tmp = Tempfile.new
  csv_slice = CSV.open slice_tmp, 'w', headers: true
  csv_comp  = CSV.open comp_tmp, 'w', headers: true
  skips = [] # array to hold the list of all skipped row numbers
  CSV.parse(input, headers: true).each_with_index do |row, index|
    csv_slice << row.headers if index == 0
    csv_comp  << row.headers if index == 0
    row_num = index + 1

    # pick the CSV to write to; slice or complement
    if (start..stop).include? row_num
      csv = csv_slice
    else
      csv = csv_comp
      skips << row_num
    end
    csv << row.to_h
  end
  skips_string = build_skips_string skips
  comps_path = build_file_name(options[:outfile], type: 'complements', span_string: skips_string)
  FileUtils.mv csv_comp.path, comps_path

  slice_string = [start, stop].uniq.join '-'
  slice_path = build_file_name(options[:outfile], type: 'slice', span_string: slice_string)
  FileUtils.mv csv_slice.path, slice_path

  slice_tmp.close
  comp_tmp.close
  puts "Wrote: #{slice_path}, #{comps_path}"
else
  output = get_csv_output options

  CSV output, headers: true do |csv|
    CSV.parse(input, headers: true).each_with_index do |row,index|
      csv << row.headers if index == 0
      csv << row.to_h if (start..stop).include? index + 1
    end
  end
end
